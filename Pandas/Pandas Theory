Pandas is a powerful and versatile library that simplifies tasks of data manipulation in Python . Pandas is built on top of the NumPy library and is particularly well-suited for working with tabular data, such as spreadsheets or SQL tables.

Pandas are generally used for data science. This is because pandas are used in conjunction with other libraries that are used for data science. It is built on the top of the NumPy library which means that a lot of structures of NumPy are used or replicated in Pandas. The data produced by Pandas are often used as input for plotting functions of Matplotlib, statistical analysis in SciPy, and machine learning algorithms in Scikit-learn.

Here is a list of things that we can do using Pandas.
>> Data set cleaning, merging, and joining.
>> Easy handling of missing data (represented as NaN) in floating point as well as non-floating point data.
>> Columns can be inserted and deleted from DataFrame and higher dimensional objects.
>> Powerful group by functionality for performing split-apply-combine operations on data sets.
>> Data Visulaization

Pandas generally provide two data structures for manipulating data. They are :
>> Series
>> DataFrame

A Pandas Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, python objects, etc.). The axis labels are collectively called indexes.

Pandas Series is nothing but a column in an Excel sheet. Labels need not be unique but must be a hashable type. The object supports both integer and label-based indexing and provides a host of methods for performing operations involving the index.

In the real world, a Pandas Series will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, or an Excel file. Pandas Series can be created from lists, dictionaries, and from scalar values, etc.


Pandas DataFrame is a two dimensional data structure with labeled axes( rows and columns )



s               SERIES


Accessing elements from series :
There are two ways to access elements from series, they are : \
>> Accessing elements froms series with position
>> Accessing elements from series using labels/ index

Accessing Element from Series with Position : In order to access the series element refers to the index number. Use the index operator [ ] to access an element in a series. The index must be an integer. In order to access multiple elements from a series, we use Slice operation

Accessing Element Using Label (index) :
In order to access an element from series, we have to set values by index label. A Series is like a fixed-size dictionary in that you can get and set values by index label.
